[project]
name = "scratchpad"
version = "0.0.0" # explicity non-versioned
description = "A scratchpad for keeping assorted notes and snippets"
authors = [
    { name = "Bradley Reynolds", email = "bradley.reynolds@tailstory.dev" },
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pytz",
    "darbiadev-utilities",
    "toml",
    "pandas",
    "parse",
    "einspect",
]

[project.urls]
repository = "https://github.com/shenanigansd/scratchpad"

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff",
    "mypy",
]
tests = [
    "pytest",
    "pytest-randomly",
    "hypothesis",
]
docs = [
    "sphinx",
    "sphinxcontrib-autoprogram",
    "sphinx-rtd-theme",
    "toml",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = []

[tool.ruff]
preview = true
unsafe-fixes = true
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
exclude = ["events", "scratch/discarded"]
ignore = [
  "CPY001", # (Missing copyright notice at top of file) - No license
  "ERA001", # (Found commented-out code) - This is a scratchpad, so...
  "S101", # (Use of `assert` detected) - Testing code as I go
  "T201", # (`print` found) - Want to be able to see the output
  "INP001", # (File `*` is part of an implicit namespace package. Add an `__init__.py`.) - Not strongly structured
  "D100", # (Missing docstring in public module) - Not really doc-ing here
  "D101", # (Missing docstring in public class) - Not really doc-ing here
  "D102", # (Missing docstring in public method) - Not really doc-ing here
  "D103", # (Missing docstring in public function) - Not really doc-ing here
  "D104", # (Missing docstring in public package) - Not really doc-ing here
  "D105", # (Missing docstring in magic method) - Not really doc-ing here
  "DOC", # (pydoclint) - Not really doc-ing here
  "S311", # (Standard pseudo-random generators are not suitable for security/cryptographic purposes) - Not doing crypto here
  "PLR2004", # (Magic value used in comparison) - Lots of single use numbers in AoC
  "PLC2701", # (Private name import `x` from external module `x`) - Testing internal methods in AoC
  "C901", # (Function is too complex) - I completely agree, but it's AoC
]

[tool.ruff.lint.extend-per-file-ignores]
"scratch/games/the-farmer-was-replaced/code.py" = [
    "F821", # (Undefined name `x`)
    "ANN001", # (Missing type annotation for function argument `x`)
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
